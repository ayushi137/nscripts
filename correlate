#!/usr/bin/env python

"""
correlate - correlate Dragonfly images against Herschel images

Expects a particular file system set up for Dragonfly images: 
<parent directory>/<object name>/<subdirectory>/
This may be followed by further subdirectories by date, or contain the files
themselves.

Requires the following software: sextractor, scamp, swarp astrometry.net
Requires the following packages: numpy, scipy, astropy, docopt, matplotlib, os
								 pandas, subprocess
Requires the following files:    photometry.py, resconvolve.py, maskdata.py
                                 regrid.py, backgroundplane.py, 
                                 create_photometriclights.py, scampswarp.py

Usage:
correlate [-hvlgqwpcrmb] [-d DIRECTORY] [-u DIRECTORIES] [-o OBJECTNAMES] 
		[-s DIRECTORY] [-f FILEPATHS] [-x DIRECTORY] [-a DIRECTORY]

Options:
    -h, --help
    -v, --verbose
    -l, --lowmemory                 If True, use a version of regridding 
                                    code that does not require high memory 
                                    usage
    -d DIRECTORY, --IOdir DIR       Location of input files (parent 
                                    directory)
                                    [default: dflydata/]
    -u LIST, --unmod LIST           A list of subdirectories of --IOdir 
                                    containing raw files and calibration 
                                    frames
                                    [default: /raw_lights/, /calframes/]
    -o OBJECTS, --objects OBJS      Provide a list of object subdirectory 
                                    names as a string
                                    [default: PGM_1_2, spi1_1]
    -s DIRECTORY, --sub DIR         Subdirectory containing flat-fielded and
                                    dark subtracted images
                                    [default: /darksub_flatfield/] 
    -f FILES, --filelist FLS        Provide a list of file paths to process
                                    as a string. If empty, processes all 
                                    file in input directory
                                    [default: ]
    -x DIRECTORY, --cross DIR       Location of files to correlate with
                                    [default: ../herschel/]
    -a DIRECTORY, --apass DIR       Location of APASS catalogues
                                    [default: /mnt/scratch-lustre/njones/SURP2015/APASS/]
Testing Options:
    -g, --generate                  If False, do not generate data from
                                    any of the following substeps unless 
                                    that data is missing
                                    [default: False]
    -q, --calibrate                 If False, do not dark subtract and flat 
                                    field them unless files are missing
    -w, --astro                     If False, do not do astrometry and 
                                    create object catalogue
    -p, --photometry                If False, do not perform photometry on 
                                    an image unless photometry data is 
                                    missing
    -c, --convolve                  If False, do not convolve an image 
                                    unless convolved image missing
    -r, --regrid                    If False, do not regrid an image unless
                                    regridded image is missing
    -m, --mask                      If False, do not mask an image unless
                                    masked image is missing
    -b, --backsub                   If False, do not background plane 
                                    subtract an image unless subtracted is 
                                    missing
"""
############################# IMPORT BASE PACKAGES #############################

import os
import docopt
import numpy as np
nmax = np.max
nmin = np.min
from numpy import *
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from astropy.io import fits
from astropy import units as u
from astropy import wcs
from astropy.time import Time
from astropy.coordinates import SkyCoord, EarthLocation, AltAz
from matplotlib.colors import LogNorm

################################ CONSTANTS ####################################
# Telescope location
lat = 32.902836
long = -105.528350
height = 2214
telescope = EarthLocation(lat=lat*u.deg,lon=long*u.deg,height = 2214*u.m)

# Conversion factor to transform sigma of scipy.signal.gaussian to FWHM
s2f = 2*np.sqrt(2*log(2))

# specify herschel resolution at each wavelength
SPIRE = {'PSW':17.6,'PMW':23.9,'PLW':35.2}
spirekeys = SPIRE.keys()

# master dark location
damdir = '/dark_masters/'
# master flat location
flmdir = '/flat_masters/'
# dark subtracted files
dsmdir = '/dark_subtracted/'

# source extractor object maps
objdir = '/objects/'
# source extractor background maps
bakdir = '/background/'
# source extractor catalogue
catdir = '/catalogue/'

# OUTPUT DIRECTORIES
# location of helper plots from zero point magnitude calculations
magdir = '/magnitudecalcs/'
# location of photometered fits files
phodir = '/photometered/'
# location of regridded images
regdir = '/regrid/'
# location of background plane subtracted images
bsudir = '/backgroundsub/'
# location of correlation plots
cordir = '/correlations/'

########################### COMMAND LINE ARGUMENTS #############################

arguments = docopt.docopt(__doc__)

# Non-mandatory options without arguments

VERBOSE = arguments['--verbose']
LOWMEMORY = arguments['--lowmemory']

# Non-mandatory options with arguments

directory = arguments['--IOdir']
rawdirs = arguments['--unmod']
rawdir = rawdirs.split(', ')[0]
caldir = rawdirs.split(', ')[1]
subdir = arguments['--sub']
APASSdir = arguments['--apass']
files = arguments['--filelist']
filelist = files.split(', ')
if filelist != ['']:
	files = True
elif filelist == ['']:
	files = False
objects = arguments['--objects'].split(', ')
herdir = arguments['--cross']

# Testing options

GENERATE = arguments['--generate']
CALIBRATE = arguments['--calibrate']
ASTROMETRY = arguments['--astro']
PHOTOMETRY = arguments['--photometry']
CONVOLVE = arguments['--convolve']
REGRID = arguments['--regrid']
MASK = arguments['--mask']
BACKSUB = arguments['--backsub']

OLDPHOTO = False

############################## IMPORT FUNCTIONS ################################

from cartesian import cartesian
from callastrometry import callastrometry
from scampswarp import scampswarp
from photometrypack import *
from resconvolve import resconvolve
from maskdata import maskdata
from regrid import reshape
from backgroundplane import subBGplane,fillplane,plane

if LOWMEMORY:
	from regrid import regrid_lowmemory as regrid
elif not LOWMEMORY:
	from regrid import regrid


#################################### FUNCTIONS #################################

def getAltAz(arr,header,time,location):
	soln = wcs.WCS(header)
	coords = cartesian([arange(arr.shape[1]),arange(arr.shape[0])])
	world = soln.wcs_pix2world(coords,0)
	radec = SkyCoord(ra=world[:,0],dec=world[:,1],frame='icrs',unit='deg')
	altaz = radec.transform_to(AltAz(obstime=time,location=telescope))
	return altaz.alt.deg,altaz.az.deg,coords[:,0],coords[:,1]

def fexists(fname):
	if os.path.isfile(fname) == True:
		return True
	elif os.path.isfile(fname) != True:
		return False

def getsubdir(directory):
	"""
	Gets all immediate subdirectories of directory

	directory:	path to directory

	Returns a list of subdirectories
	"""
	subdir=[name for name in os.listdir(directory)
			if os.path.isdir(os.path.join(directory, name))]
	subdir.sort()
	subdir=['/'+name+'/' for name in subdir if '.' not in name]
	return subdir


def sexcall(f,ddi,odi,cdi,bdi):
	"""
	Run source extractor on f, producing a catalogue, and object and background maps

	f:		file name to run source extractor on
	ddi:		directory path to f
	odi:	directory to save object map in
	cdi:	directory to save catalogue in
	bdi:	directory to save background map in

	Returns nothing explicitly, but runs source extractor on the file
	"""
	# Split to make file name for catalogue, 
	# object map and background map filenames
	fname = f.split('.fits')[0]
	# Construct source extractor call
	objsexcall = 'sex -CATALOG_TYPE ASCII_HEAD -PARAMETERS_NAME photo.param -CATALOG_NAME '+cdi+fname+'.cat'+' -CHECKIMAGE_TYPE OBJECTS -CHECKIMAGE_NAME '+odi+fname+'_objects.fits '+ddi+f
	baksexcall = 'sex -CATALOG_TYPE ASCII_HEAD -PARAMETERS_NAME photo.param -CATALOG_NAME '+cdi+fname+'.cat'+' -CHECKIMAGE_TYPE BACKGROUND -CHECKIMAGE_NAME '+bdi+fname+'_background.fits '+ddi+f
	os.system(objsexcall)
	os.system(baksexcall)

def hist2d(x,y,nbins,maskval = 0,saveloc = '',labels=[],slope = 1,sloperr = 0):
	"""
	Creates a 2D histogram from data given by numpy's histogram

	x,y:		two 2D arrays to correlate, the second masked
	nbins:		number of bins
	maskval:	value that indicates masked areas
				(kwarg, default = 0)
	saveloc:	place to save histogram plot - if unspecified, do not
				save plot (kwarg, default = '')
	labels:		labels for histogram plot, with the following format
				[title,xlabel,ylabel,zlabel] - if unspecified, do 
				not label plot (kwarg, default = [])

	Returns the edges of the histogram bins and the 2D histogram

	"""
	# Remove NAN values
	a = where(isnan(x) == False)
	x = x[a]
	y = y[a]
	b = where(isnan(y) == False)
	x = x[b]
	y = y[b]
	# Remove masked areas
	c = where(y != maskval)
	x = x[c]
	y = y[c]
	# Create histogram
	H,xedges,yedges = histogram2d(x,y,bins=nbins)
	# Reorient appropriately
	H = rot90(H)
	H = flipud(H)
	# Mask zero value bins
	Hmasked = ma.masked_where(H==0,H)
	# Find averages:
	yavgs = []
	ystds = []
	xposs = []
	for j in range(len(xedges)-1):
		toavg = where((x > xedges[j]) & (x < xedges[j+1]))
		xpos = np.mean(x[toavg])
		yavg = np.median(y[toavg])
		ystd = np.std(y[toavg])/len(y[toavg])
		xposs.append(xpos)
		yavgs.append(yavg)
		ystds.append(ystd)
	# Begin creating figure
	plt.figure(figsize=(12,10))
	# Use logscale
	plt.pcolormesh(xedges,yedges,Hmasked,
	               norm = LogNorm(vmin = Hmasked.min(),vmax = Hmasked.max()),
		       cmap = plt.get_cmap('Spectral_r'))
	uplim = nmax(x)+5
	dolim = nmin(x)-5
	x_range = arange(dolim,uplim)
	plt.plot(x_range,slope*x_range,color = 'royalblue',linewidth = 3,label = 'Slope = {0}, Uncertainty = {1}'.format(slope,sloperr))
	plt.errorbar(xposs,yavgs,yerr = ystds,fmt = 'D',color='k',markersize = 5)
	plt.xlim(dolim+5,uplim-5)
	plt.ylim(nmin(y),nmax(y))
	cbar = plt.colorbar()
	# Add labels
	if labels != []:
	    title,xlabel,ylabel,zlabel = labels
	    plt.xlabel(xlabel)
	    plt.ylabel(ylabel)
	    plt.title(title)
	    cbar.ax.set_ylabel(zlabel)
	    plt.legend(loc = 'best',fontsize = 15)
	# Save plot
	if saveloc != '':
		plt.savefig(saveloc)
	plt.close()
	# Return histogram
	return xedges,yedges,Hmasked


######################### FIND FILES AND PREP FOR OUTPUT ######################
# if necessary, specify observation date subdirectory names for each object 
# in a dictionary
if files:
	objectdates = {}
	datenames = {}
	objectherfiles = {}
	breakdown = filelist[0].split('/')
	breakdown = [i for i in breakdown if i != '']
	fname = breakdown.pop(-1)
	date = breakdown.pop(-1)
	rawdir = '/'+breakdown.pop(-1)+'/'
	objects = breakdown.pop(-1)
	directory = '/'+'/'.join(breakdown)+'/'
	for f in filelist:
		breakdown = f.split('/')
		breakdown = [i for i in breakdown if i != '']
		fname = breakdown.pop(-1)
		date = breakdown.pop(-1)
		newrawdir = '/'+breakdown.pop(-1)+'/'
		assert newrawdir == rawdir
		cloud = breakdown.pop(-1)
		newdirectory = '/'+'/'.join(breakdown)+'/'
		assert newdirectory == directory
		try:
			datenames[date].append(fname)
		except KeyError:
			datenames[date] = [fname]
		try:
			objectdates[cloud].append(date)
		except KeyError:
			objectdates[cloud] = [date]
		hdirec = herdir+'/'+cloud
		#os.system('python rewriteherschel -d '+hdirec)
		herfiles = os.listdir(hdirec)
		objectherfiles[cloud] = [hdirec+'/'+i for i in herfiles 
					 if 'reindex' in i]

objects.sort()
if not files:
	objectdates = {}
	datenames = {}
	objectherfiles = {}
	for cloud in objects:
		direc = directory+'/'+cloud+rawdir
		subdirs = getsubdir(direc)
		subdirs = [i for i in subdirs if 'all_nights' not in i]
		objectdates[cloud] = subdirs
		hdirec = herdir+'/'+cloud
		#os.system('python rewriteherschel.py -d '+hdirec)
		herfiles = os.listdir(hdirec)
		objectherfiles[cloud] = [hdirec+'/'+i for i in herfiles 
					 if 'reindex' in i]
		for date in subdirs:
			fnames = os.listdir(direc+'/'+date)
			datenames[date] = fnames
keys = objectdates.keys()

# master dark location
damdir = '/dark_masters/'
# master flat location
flmdir = '/flat_masters/'
# dark subtracted files
dsmdir = '/dark_subtracted/'

# source extractor object maps
objdir = '/objects/'
# source extractor background maps
bakdir = '/background/'
# source extractor catalogue
catdir = '/catalogue/'


# if any of the output directories are missing, create them now
dirlist = [damdir,flmdir,dsmdir,objdir,bakdir,catdir,subdir,phodir,
	   regdir,cordir,magdir,bsudir]
for d in dirlist:
    for key in keys:
        if os.path.isdir(directory+key+d) == False:
            os.system('mkdir '+directory+key+d)

################################ STEPS #####################################

for key in keys:
    print 'OBJECT '+key
    dates = objectdates[key]
    herfiles = objectherfiles[key]
    for date in dates:
        print 'DATE '+date

################################ CALIBRATE #####################################
        fs = datenames[date]
	if fs == []:
		continue
	if GENERATE or CALIBRATE:
		print 'Generate calibration files'
		if files:
			calcom = ('python calibratedata -g -f '+
				  (', ').join(filelist))
		if not files:
			calcom = ('python calibratedata -g  -o '+key+
				  ' -t '+date)
		os.system(calcom)
	if not GENERATE and not CALIBRATE:
		print 'Check for calibration files'
		if files:
			calcom = ('python calibratedata -f '+
				  (', ').join(filelist))
		if not files:
			calcom = ('python calibratedata -o '+key+
				  ' -t '+date)
		#calcom = './calibratedata.sh {0} {1} {2} {3} '.format(directory,
		#						     key,date,
		#caldir)
		#calcom += '{0} {1} {2} {3} {4}'.format(rawdir,damdir,flmdir,
		#				       dsmdir,subdir)
        	os.system(calcom)
	print 'Create directories'
        # Directory containing raw image files
        di = directory+key+rawdir+date+'/'
        # Directory containing dark subtracted and flat fielded files
        ddi = directory+key+subdir+date+'/'
        # Directory containing source extractor object maps
        odi = directory+key+objdir+date+'/'
        # Directory containing source extractor catalogues
        cdi = directory+key+catdir+date+'/'
        # Directory containing source extractor background maps
        bdi = directory+key+bakdir+date+'/'
        # Directory containing photometered images
        pdi = directory+key+phodir+date+'/'
        # Directory containing regridded images
        rdi = directory+key+regdir+date+'/'
        # Directory containing masked images
        mdi = directory+key+magdir+date+'/'
        # Directory containing background subtracted images
        gdi = directory+key+bsudir+date+'/'
        # Directory containing correlation plots
        sdi = directory+key+cordir+date+'/'
        # Create output directories if any are missing
        for d in dirlist:
            if os.path.isdir(directory+key+d+date) == False:
                os.system('mkdir '+directory+key+d+date+'/')

################################ CYCLE FILES ###################################
        for f in fs:
		try:
			print 'FILE '+di+f
			f = f.split('.fits')[0]+'_ds_ff.fits'
            # Confirm calibrated file exists
			print os.path.isfile(ddi+f)
			assert os.path.isfile(ddi+f) == True
			spl = f.split('.fits')[0]

################################ ASTROMETRY ####################################
			if GENERATE==True or ASTROMETRY==True:
				print 'Do astrometry'
				callastrometry(ddi+f,generate=True)
			else:
				print 'Check for astrometry necessity'
				callastrometry(ddi+f)
			if GENERATE==True or ASTROMETRY==True:
				scampswarp(ddi+f)
			oldhead = fits.getheader(ddi+f)
			f = spl+'_ss.fits'
			fspl = f.split('.fits')[0]
			ssdata,newhead = fits.getdata(ddi+f,header=True)
			uphead = oldhead.copy()
			uphead.update(newhead)
			fits.writeto(ddi+f,ssdata,uphead,clobber=True)
################################ SEXTRACTOR ####################################
			#if (GENERATE==True or os.path.isfile(cdi+spl+'.cat')==False or 
			#    os.path.isfile(odi+spl+'_objects.fits')==False or 
			#    os.path.isfile(bdi+spl+'_background.fits')==False or
			#    ASTROMETRY==True):
			sexcall(f,ddi,odi,cdi,bdi)
################################ IMAGE PROPERTIES ##############################
            # Read in ds-ff-ss data from file
			dflyimage = fits.open(ddi+f)
			dflydata = dflyimage[0].data
			dflydata[where(isnan(dflydata)==True)] = 0
			dflyheader = dflyimage[0].header
			dflyimage.close()
			soln = wcs.WCS(dflyheader)
	    # Load catalogue data to find FWHM information
			catdata = loadtxt(cdi+fspl+'.cat')
            # Find pixel scale from astrometry info
			pscalx = dflyheader['PSCALX']
			pscaly = dflyheader['PSCALY']
			pixscale = (pscalx+pscaly)/2.
            # Select for unflagged entries
			cheader = catheader(cdi+fspl+'.cat')
			catdata = catdata[where(catdata[:,cheader['FLAGS']] == 0)]
			pfwhm = mean(catdata[:,cheader['FWHM_IMAGE']])
			dflybeam = pfwhm*pixscale
			print 'FWHM 1 = ',dflybeam
			catdata = catdata[where(catdata[:,cheader['CLASS_STAR']]<1e-15)]
            # Find the average FWHM and convert to arcseconds
			pfwhm = mean(catdata[:,cheader['FWHM_IMAGE']])
			dflybeam = pfwhm*pixscale
			print 'FWHM 2 = ',dflybeam
			if isnan(dflybeam)==True: 
				print 'No FWHM found'
				continue
            # Add FWHM to header
			dflyheader['FWHM'] = (dflybeam, 'arcseconds')
			fits.writeto(ddi+f,dflydata,dflyheader,clobber=True)
            # If polarization data, skip
			if dflyheader['FILTNAM'] == 'Pol':
				print 'Skipping polarization data'
				continue  

################################ PHOTOMETRY ###################################      
            # Choose photometered file name
            # Choose output location for photometry related plots
			outplots = mdi+fspl
            # Run photometry
			print 'Run photometry'
			if OLDPHOTO:
				pname = fspl+'_oldphoto.fits'
			if not OLDPHOTO:
				pname = fspl+'_photo.fits'
			if (os.path.isfile(pdi+pname) != True or GENERATE == True or 
			    PHOTOMETRY == True):
				if OLDPHOTO:
					pdata,dflyheader,zp = photometry(ddi+f,cdi+fspl+'.cat',
									 APASSdir,pdi+pname, 
									 create = True,
									 plot = outplots)
				if not OLDPHOTO:
					os.system('python create_photometriclights.py -p -k -u {0} -o {1} -r {2}'.format(ddi+f,ddi,APASSdir))
					try:
						photodat,H = fits.getdata(ddi+f.split('.fits')[0]+'_pcapass.fits',header = True)
						photodat = reshape(photodat,photodat,0,limval=0)
					except IOError:
						print 'Missing photometry'
						continue
					zp = H['ZP3']
					kJperADU = float(tokjypersr(1,pixscale,zp))
					H['kJpADU'] = (kJperADU,'kJy/sr per ADU/pixel')
					H['M0'] = zp
					fits.writeto(pdi+pname,photodat*kJperADU,H,clobber=True)
					callastrometry(pdi+pname,generate=True)
					dflyheader = H
			elif (os.path.isfile(pdi+pname) == True and GENERATE == False and 
			      PHOTOMETRY == False):
				pdata,dflyheader = fits.getdata(pdi+pname,header=True)
				zp = dflyheader['M0']
            # If photometry failed, quit
			if zp == 'N/A':
				print 'Photometry failed, skipping file'
				continue
            # Convert units in object and background map
			try:
				convert = dflyheader['kJpADU']
			except KeyError:
				print 'Could not find conversion factor'
				continue
			pspl = pname.split('.fits')[0]
			sexcall(pname,pdi,odi,cdi,bdi)
			#pstar = fits.getdata(odi+spl+'_objects.fits')*convert
			#pback = fits.getdata(bdi+spl+'_background.fits')*convert
			#fits.writeto(odi+spl+'_photo_objects.fits',pstar,dflyheader,
			#	     clobber=True)
			#fits.writeto(bdi+spl+'_photo_background.fits',pback,dflyheader,
			#	     clobber=True)
            
################################ CYCLE CORRELTION-FILES #########################
			print 'Cycle Herschel Files'
			for hername in herfiles:
				skey = [i for i in spirekeys if i in hername][0]
				herbeam = SPIRE[skey]

################################ CONVOLUTION #####################################
                # Create output file names
				
				cname = pspl+'_convto'+str(herbeam)+'.fits'
				ocname = pspl+'_convto'+str(herbeam)+'_objects.fits'
                # Do convolution on sky image
				print 'Begin convolution'
				if (os.path.isfile(pdi+cname) == True and 
				    GENERATE == False and CONVOLVE == False):
					cdata,dflyheader = fits.getdata(pdi+cname,header=True)
				elif os.path.isfile(pdi+cname) != True or GENERATE == True or CONVOLVE == True:
					cdata,dflyheader = resconvolve(pdi+pname,dflybeam,herbeam,
								       outfile = pdi+cname,
								       header = dflyheader)
                # Do convolution on object map
				if os.path.isfile(odi+ocname) == True and GENERATE == False and CONVOLVE == False:
					ocdata,oheader = fits.getdata(odi+ocname,header=True)
				elif os.path.isfile(odi+ocname) != True or GENERATE == True or CONVOLVE == True:
					ocdata,oheader = resconvolve(odi+pspl+'_objects.fits',
                    						     dflybeam,herbeam,
								     outfile = odi+ocname,
								     header = dflyheader)
				if dflyheader == 0:
					print 'Convolution failed, skipping file'
					continue

################################ MASK #####################################
                # Set cutoff for mask
				#focdata = ocdata.flatten()
				#focdata = sort(focdata)
				#medi = focdata[len(focdata)/2]
				#cutoff = 10*medi
				print 'Do masking'
				cutoff = 0.1
				mapcut = fits.getdata(odi+ocname)
				mapcut[where(mapcut > cutoff)] = 0
                # Create mask name
				mspl = cname.split('.fits')[0]
				mname = mspl+'_mask{0}kJysr.fits'.format(cutoff)
				fits.writeto(odi+mspl+'_mask{0}kJysr_objects.fits'.format(cutoff),mapcut,dflyheader,clobber=True)

                # Mask data
				if os.path.isfile(pdi+mname) == True and GENERATE == False and MASK == False:
					mdata,dflyheader = fits.getdata(pdi+mname,header=True)
					target = fits.getdata(hername)
				if os.path.isfile(pdi+mname) != True or GENERATE == True or MASK == True or dflyheader['MASKCUT'] - cutoff > 1e-15:
					cdata,target = regrid(pdi+cname,hername)
					ocdata,target = regrid(odi+ocname,hername)
					mdata,dflyheader = maskdata(cdata,ocdata,cutoff,
								    outfile = pdi+mname,
								    header = dflyheader)
				p0 = [2,1,1,1]
################################ RESHAPE #####################################  
				print 'Do reshape'
				mspl = mname.split('.fits')[0]
				ress = np.sqrt((dflybeam/s2f)**2+(herbeam/s2f)**2)
				r = reshape(mdata,mdata,2*ress)
				t = reshape(target,mdata,2*ress)

################################ REGRID #####################################
				rname = mspl+'_regrid.fits'
				hname = hername.split('.fits')[0]
				hname = hname+'_reshaped.fits'
				fits.writeto(rdi+rname,r,dflyheader,clobber=True)

################################ BACK-SUB #####################################
				print 'Background plane fit'
				rspl = rname.split('.fits')[0]
				bname = rspl+'_backsub.fits'
				p0 = [2,1,1,1]
				newr,bg,ps,errs = subBGplane(r,t,p0)
				hheader = fits.getheader(hername)
				time = Time(dflyheader['DATE'])
				planefill = zeros((90,360))
				alt,az,xpix,ypix = getAltAz(bg,hheader,time,telescope)
				alt = alt[0::100]
				az = az[0::100]
				xpix = xpix[0::100]
				ypix = ypix[0::100]
				temp = []
				for i in range(len(xpix)):
					temp.append(bg[ypix[i]][xpix[i]])
				plt.figure(figsize = (12,10))
				plt.tripcolor(az,alt,temp,cmap = plt.cm.gray)
				plt.colorbar()
				plt.xlabel('Azimuth [deg]')
				plt.ylabel('Altitude [deg]')
				plt.savefig(bdi+mspl+'_bgplane_azalt.png')
				plt.close()
				if isinstance(newr,float) != True:
					dflyheader['BACKSUB'] = 'TRUE'
					dflyheader['BACKDIF'] = nmax(bg)-nmin(bg)
					dflyheader['SLOPE'] = ps[0]
					dflyheader['SLOPE_ERR'] = errs[0,0]
					dflyheader['XDEP'] = ps[1]
					dflyheader['XDEP_ERR'] = errs[1,1]
					dflyheader['YDEP'] = ps[2]
					dflyheader['YDEP_ERR'] = errs[2,2]
					dflyheader['PCONST'] = ps[3]
					dflyheader['PCONST_ERR'] = errs[3,3]
					if dflyheader['FILTNAM'] == 'SloanR':
						dflyheader['GSLOPE'] = ps[-1]*4.811e14
					if dflyheader['FILTNAM'] == 'SloanG':
						dflyheader['GSLOPE'] = ps[-1]*6.285e14
					fits.writeto(gdi+bname,newr,dflyheader,clobber=True)
					fits.writeto(bdi+mspl+'_bgplane.fits',bg,dflyheader,clobber=True)
					bspl = bname.split('.fits')[0]
					saveloc = sdi+bspl+'_'+skey+'.png'
					title = 'Correlation between Dragonfly and Herschel'
					xlabel = 'Herschel [MJy/sr]'
					ylabel = 'Dragonfly [kJy/sr]'
					zlabel = 'Pixels'
					labels = [title,xlabel,ylabel,zlabel]
					pos = where(r > 0)
					H = hist2d(t[pos],newr[pos],50,saveloc=saveloc,labels = labels,slope = ps[0],sloperr = errs[0,0])
				elif isinstance(newr,float) == True:
					print 'Failed background subtraction'
					continue
				print 'Done ', f,'\n\n\n\n\n\n'
		except AssertionError as e:
			print e
			print 'Calibrated file missing for ',f
			continue
                #fits.writeto(hname,t,clobber=True

