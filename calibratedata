#!/usr/bin/env python
"""
Requires the following packages: os, docopt, astropy
Requires the following files: correlate_config.py

Usage:
calibratedata [-hvg] [-u DIRECTORY] [-o OBJECT] [-t DATE] [-f FILES]

Options:
    -h, --help
    -v, --verbose
    -g, --generate                 Generate all files from scratch
    
    -u DIRECTORY, --updir DIR      Parent directory
                                   [default: /mnt/scratch-lustre/njones/SURP2015/dflydata/]
    -o OBJECT, --cloud DIR         Cloud name
                                   [default: spi1_1]
    -t DATE, --date DATE           Date of observation
                                   [default: 2014-10-31]
    -f FILES, --files FILES        File list
                                   [default: ]
"""
############################ IMPORT PACKAGES ###################################

import os
import docopt
from astropy.io import fits
from correlate_config import *

################################## ARGUMENTS ###################################
arguments = docopt.docopt(__doc__)

# Non-mandatory options with arguments
files = arguments['--files']
filelist = files.split(', ')
updir = arguments['--updir']
cloud = arguments['--cloud']
date = arguments['--date']

# Non-mandatory options without arguments
GENERATE = arguments['--generate']
VERBOSE = arguments['--verbose']

if filelist != ['']:
    files = True
################################## DIRECTORIES #################################

# Read in file info
cals = config_data['cals']
raws = config_data['raws']
subs = config_data['dsff']

# Specify directories
parentdir = updir+'/'+cloud
calfilesdir = parentdir+'/'+cals+'/'+date
rawlightsdir = parentdir+'/'+raws+'/'+date
masterdarkdir = parentdir+'/'+damdir+'/'+date
masterflatdir = parentdir+'/'+flmdir+'/'+date
darksubdir = parentdir+'/'+dsmdir+'/'+date
fullcaldir = parentdir+'/'+subs+'/'+date
badframesdir = config_data['badframesdir']

# If list of files not specified, make one from all files in the 
# target directory
if not files:
    if VERBOSE:
        print 'Making file list for dark subtraction and flat fielding'
    filelist = os.listdir(rawlightsdir)
    filelist = [rawlightsdir+'/'+f for f in filelist]

# If list of files specified, find appropriate output directories for each
if files:
    if VERBOSE:
        print 'Making list of output calibration directories for given file list. '
    calfilesdir = []
    rawlightsdir = []
    masterdarkdir = []
    masterflatdir = []
    darksubdir = []
    fullcaldir = []
    # Extract date, raw directory and object from first file in list
    breakdown = filelist[0].split('/')
    fname = breakdown.pop(-1)
    date = breakdown.pop(-1)
    rawdir = '/'+breakdown.pop(-1)+'/'
    objects = breakdown.pop(-1)
    # Find the parent directory
    parentdir = '/'.join(breakdown)+'/'
    for f in filelist:
        # Repeat the process of finding the parent directory and file info
        breakdown = f.split('/')
        fname = breakdown.pop(-1)
        date = breakdown.pop(-1)
        newrawdir = '/'+breakdown.pop(-1)+'/'
        cloud = breakdown.pop(-1)
        newdirectory = '/'.join(breakdown)+'/'
        # Confirm that the parent directory
        # is the same as for the first file
        try:
            assert newdirectory == parentdir
        except AssertionError:
            filelist.remove(f)
            if VERBOSE:
                print 'Cannot process '+f+', it is not in '+parentdir
            continue
        # Add appropriate output files to list
        calfilesdir.append(parentdir+'/'+cloud+'/'+cals+'/'+date)
        rawlightsdir.append(parentdir+'/'+cloud+'/'+raws+'/'+date)
        masterdarkdir.append(parentdir+'/'+cloud+'/'+damdir+'/'+date)
        masterflatdir.append(parentdir+'/'+cloud+'/'+flmdir+'/'+date)
        darksubdir.append(parentdir+'/'+cloud+'/'+dsmdir+'/'+date)
        fullcaldir.append(parentdir+'/'+cloud+'/'+subs+'/'+date)
    

if VERBOSE:
    print 'If calibration output directories do not exist, create them.'
dis = [masterdarkdir,masterflatdir,darksubdir,fullcaldir]
for di in dis:
    if isinstance(di,str):
        if not os.path.isdir(di):
            os.makedirs(di)
    elif isinstance(di,list):
        for d in di:
            if not os.path.isdir(d):
                os.makedirs(d)

################################ FILE PROCESSING ###############################
if VERBOSE:
    print 'Begin processing files'
for f in range(len(filelist)):
    if isinstance(rawlightsdir,list):
        rawlights = rawlightsdir[f]
        masterdark = masterdarkdir[f]
        masterflat = masterflatdir[f]
        darksub = darksubdir[f]
        calfiles = calfilesdir[f]
        fullcal = fullcaldir[f]
    elif isinstance(rawlightsdir,str):
        rawlights = rawlightsdir
        masterdark = masterdarkdir
        masterflat = masterflatdir
        darksub = darksubdir
        calfiles = calfilesdir
        fullcal = fullcaldir
    if VERBOSE:
        print 'If necessary, create folder for bad frames for '+filelist[f]
    if os.path.isdir(rawlights+'/'+badframesdir) == False:
        os.makedirs(rawlights+'/'+badframesdir)
    header = fits.getheader(filelist[f])
    fname = filelist[f].split('/')[-1]
    fname = fname.split('.fits')[0]
    serialno = header['SERIALNO']
    exptime = str(header['EXPTIME'])
    if VERBOSE:
        print 'Checking for master darks for '+filelist[f]
    mdarcheck = os.system('ls '+masterdark+'/master_'+serialno+'_dark_'+exptime+'.fits')
    if mdarcheck != 0 or GENERATE ==True:
        if VERBOSE:
            print 'Creating master darks for '+filelist[f]
        os.system('./create_masterdarks -v -o '+masterdark+' '+calfiles)
    mdarcheck = os.system('ls '+masterdark+'/master_'+serialno+'_dark_'+exptime+'.fits')
    if mdarcheck != 0:
        if VERBOSE:
            print 'Missing master darks for image '+filelist[f]+', skipping.'
        os.system('mv '+filelist[f]+' '+rawlights+'/'+badframesdir)
        continue
    os.system('ls '+calfiles+'/*'+serialno+'*flat.fits > tmp.txt')
    flatfilelist = []
    mdarchecks = []
    sdarchecks = []
    if VERBOSE:
        print 'Checking for master darks for flats for '+filelist[f]
    with open('tmp.txt') as t:
        for line in t:
            line = line.split('/')[-1]
            line = line.split('.fits')[0]
            theader = fits.getheader(calfiles+'/'+line+'.fits')
            texptime = str(theader['EXPTIME'])
            mdarcheck = os.system('ls '+masterdark+'/master_'+serialno+'_dark_'+texptime+'.fits')
            mdarchecks.append(mdarcheck)
            sdarcheck = os.system('ls '+darksub+'/'+line+'_ds.fits')
            sdarchecks.append(sdarcheck)
    if not all(mdarchecks) < 1:
        if VERBOSE:
            print 'Missing master darks for flat field for '+filelist[f]+', skipping.'
        os.system('mv '+filelist[f]+' '+rawlights+'/'+badframesdir)
        continue
    if VERBOSE:
        print 'Checking for dark subtracted '+filelist[f]
    sdarcheck = os.system('ls '+darksub+'/'+fname+'_ds.fits')
    if sdarcheck != 0 or GENERATE == True:
        if VERBOSE:
            print 'Subtracting master darks from '+filelist[f]
        os.system('./subtract_masterdarks -v -m '+masterdark+' -o '+
                  darksub+' '+rawlights)
    sdarcheck = os.system('ls '+darksub+'/'+fname+'_ds.fits')
    if sdarcheck != 0:
        if VERBOSE:
            print 'Missing dark subtracted '+filelist[f]+', skipping'
        os.system('mv '+filelist[f]+' '+rawlights+'/'+badframesdir)
        continue
    if not all(sdarchecks) < 1:
        if VERBOSE:
            print 'Creating dark subtracted master flats for '+filelist[f]
        os.system('./subtract_masterdarks -v -m '+masterdark+' -o '+ 
                  darksub+' '+calfiles)
    with open('tmp.txt') as t:
        for line in t:
            line = line.split('/')[-1]
            line = line.split('.fits')[0]
            sdarcheck = os.system('ls '+darksub+'/'+line+'_ds.fits')
            sdarchecks.append(sdarcheck)
    if not all(sdarchecks) < 1:
        if VERBOSE:
            print 'Missing dark subtracted flats for '+filelist[f]+', skipping'
        os.system('mv '+filelist[f]+' '+rawlights+'/'+badframesdir)
        continue
    if VERBOSE:
        print 'Checking for master flats for '+filelist[f]
    mflacheck = os.system('ls '+masterflat+'/master_'+serialno+'_flat.fits')
    if mflacheck != 0 or GENERATE == True:
        if VERBOSE:
            print 'Creating master flats for '+filelist[f]
        os.system('./create_masterflats -v -o '+masterflat+' '+darksub)
    mflacheck = os.system('ls '+masterflat+'/master_'+serialno+'_flat.fits')
    if mflacheck != 0:
        if VERBOSE:
            print 'Missing master flats for '+filelist[f]+', skipping.'
        os.system('mv '+filelist[f]+' '+rawlights+'/'+badframesdir)
        continue
    if VERBOSE:
        print 'Checking for fully calibrated image '+filelist[f]        
    divfcheck = os.system('ls '+fullcal+'/'+fname+'_ds_ff.fits')
    if divfcheck != 0 or GENERATE == True:
        if VERBOSE:
            print 'Creating fully calibrated image for '+filelist[f]
        os.system('./divideby_masterflats -v -m '+masterflat+' -o '+
                  fullcal+' '+darksub)
    divfcheck = os.system('ls '+fullcal+'/'+fname+'_ds_ff.fits')
    if divfcheck != 0:
        if VERBOSE:
            print 'Missing flat-divided images for '+filelist[f]
        os.system('mv '+filelist[f]+' '+rawlights+'/'+badframesdir)
        continue
    
